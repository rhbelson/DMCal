{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/http/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface HTTPResponse {\n  /**\n   * The status number of the response\n   */\n  status: number;\n  /**\n   * The headers of the response\n   */\n  headers: any;\n  /**\n   * The URL of the response. This property will be the final URL obtained after any redirects.\n   */\n  url: string;\n  /**\n   * The data that is in the response. This property usually exists when a promise returned by a request method resolves.\n   */\n  data?: any;\n  /**\n   * Error response from the server. This property usually exists when a promise returned by a request method rejects.\n   */\n  error?: string;\n}\n\n/**\n * @name HTTP\n * @description\n * Cordova / Phonegap plugin for communicating with HTTP servers. Supports iOS and Android.\n *\n * Advantages over Javascript requests:\n * - Background threading - all requests are done in a background thread\n * - SSL Pinning\n *\n * @usage\n * ```typescript\n * import { HTTP } from '@ionic-native/http';\n *\n * constructor(private http: HTTP) {}\n *\n * ...\n *\n * this.http.get('http://ionic.io', {}, {})\n *   .then(data => {\n *\n *     console.log(data.status);\n *     console.log(data.data); // data received by server\n *     console.log(data.headers);\n *\n *   })\n *   .catch(error => {\n *\n *     console.log(error.status);\n *     console.log(error.error); // error message as string\n *     console.log(error.headers);\n *\n *   });\n *\n * ```\n * @interfaces\n * HTTPResponse\n */\n@Plugin({\n  pluginName: 'HTTP',\n  plugin: 'cordova-plugin-advanced-http',\n  pluginRef: 'cordova.plugin.http',\n  repo: 'https://github.com/silkimen/cordova-plugin-advanced-http',\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class HTTP extends IonicNativePlugin {\n  /**\n   * This returns an object representing a basic HTTP Authorization header of the form.\n   * @param username {string} Username\n   * @param password {string} Password\n   * @returns {Object} an object representing a basic HTTP Authorization header of the form {'Authorization': 'Basic base64EncodedUsernameAndPassword'}\n   */\n  @Cordova({ sync: true })\n  getBasicAuthHeader(\n    username: string,\n    password: string\n  ): { Authorization: string } {\n    return;\n  }\n\n  /**\n   * This sets up all future requests to use Basic HTTP authentication with the given username and password.\n   * @param username {string} Username\n   * @param password {string} Password\n   */\n  @Cordova({ sync: true })\n  useBasicAuth(username: string, password: string): void {}\n\n  /**\n   * Get all headers defined for a given hostname.\n   * @param host {string} The hostname\n   * @returns {string} return all headers defined for the hostname\n   */\n  @Cordova({ sync: true })\n  getHeaders(host: string): string {\n    return;\n  }\n\n  /**\n   * Set a header for all future requests. Takes a hostname, a header and a value.\n   * @param host {string} The hostname to be used for scoping this header\n   * @param header {string} The name of the header\n   * @param value {string} The value of the header\n   */\n  @Cordova({ sync: true })\n  setHeader(host: string, header: string, value: string): void {}\n\n  /**\n   * Get the name of the data serializer which will be used for all future POST and PUT requests.\n   * @returns {string} returns the name of the configured data serializer\n   */\n  @Cordova({ sync: true })\n  getDataSerializer(): string {\n    return;\n  }\n\n  /**\n   * Set the data serializer which will be used for all future POST and PUT requests. Takes a string representing the name of the serializer.\n   * @param serializer {string} The name of the serializer. Can be urlencoded, utf8 or json\n   */\n  @Cordova({ sync: true })\n  setDataSerializer(serializer: string): void {}\n\n  /**\n   * Add a custom cookie.\n   * @param url {string} Scope of the cookie\n   * @param cookie {string} RFC compliant cookie string\n   */\n  @Cordova({ sync: true })\n  setCookie(url: string, cookie: string): void {}\n\n  /**\n   * Clear all cookies.\n   */\n  @Cordova({ sync: true })\n  clearCookies(): void {}\n\n  /**\n   * Remove cookies for given URL.\n   * @param url {string}\n   * @param cb\n   */\n  @Cordova({ sync: true })\n  removeCookies(url: string, cb: () => void): void {}\n\n  /**\n   * Resolve cookie string for given URL.\n   * @param url {string}\n   */\n  @Cordova({ sync: true })\n  getCookieString(url: string): string {\n    return;\n  }\n\n  /**\n   * Get global request timeout value in seconds.\n   * @returns {number} returns the global request timeout value\n   */\n  @Cordova({ sync: true })\n  getRequestTimeout(): number {\n    return;\n  }\n\n  /**\n   * Set global request timeout value in seconds.\n   * @param timeout {number} The timeout in seconds. Default 60\n   */\n  @Cordova({ sync: true })\n  setRequestTimeout(timeout: number): void {}\n\n  /**\n   * Set SSL Cert handling mode, being one of the following values\n   * default: default SSL cert handling using system's CA certs\n   * nocheck: disable SSL cert checking, trusting all certs (meant to be used only for testing purposes)\n   * pinned: trust only provided certs\n   * @see https://github.com/silkimen/cordova-plugin-advanced-http#setsslcertmode\n   * @param {'default' | 'nocheck' | 'pinned'} mode SSL Cert handling mode\n   */\n  @Cordova()\n  setSSLCertMode(mode: 'default' | 'nocheck' | 'pinned'): Promise<void> {\n    return;\n  }\n\n  /**\n   * Disable following redirects automatically.\n   * @param disable {boolean} Set to true to disable following redirects automatically\n   * @returns {Promise<void>} returns a promise that will resolve on success, and reject on failure\n   */\n  @Cordova()\n  disableRedirect(disable: boolean): Promise<void> {\n    return;\n  }\n\n  /**\n   * Make a POST request\n   * @param url {string} The url to send the request to\n   * @param body {Object} The body of the request\n   * @param headers {Object} The headers to set for this request\n   * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  post(url: string, body: any, headers: any): Promise<HTTPResponse> {\n    return;\n  }\n\n  /**\n   * Make a GET request\n   * @param url {string} The url to send the request to\n   * @param parameters {Object} Parameters to send with the request\n   * @param headers {Object} The headers to set for this request\n   * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  get(url: string, parameters: any, headers: any): Promise<HTTPResponse> {\n    return;\n  }\n\n  /**\n   * Make a PUT request\n   * @param url {string} The url to send the request to\n   * @param body {Object} The body of the request\n   * @param headers {Object} The headers to set for this request\n   * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  put(url: string, body: any, headers: any): Promise<HTTPResponse> {\n    return;\n  }\n\n  /**\n   * Make a PATCH request\n   * @param url {string} The url to send the request to\n   * @param body {Object} The body of the request\n   * @param headers {Object} The headers to set for this request\n   * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  patch(url: string, body: any, headers: any): Promise<HTTPResponse> {\n    return;\n  }\n\n  /**\n   * Make a DELETE request\n   * @param url {string} The url to send the request to\n   * @param parameters {Object} Parameters to send with the request\n   * @param headers {Object} The headers to set for this request\n   * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  delete(url: string, parameters: any, headers: any): Promise<HTTPResponse> {\n    return;\n  }\n\n  /**\n   * Make a HEAD request\n   * @param url {string} The url to send the request to\n   * @param parameters {Object} Parameters to send with the request\n   * @param headers {Object} The headers to set for this request\n   * @returns {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  head(url: string, parameters: any, headers: any): Promise<HTTPResponse> {\n    return;\n  }\n\n  /**\n   *\n   * @param url {string} The url to send the request to\n   * @param body {Object} The body of the request\n   * @param headers {Object} The headers to set for this request\n   * @param filePath {string} The local path of the file to upload\n   * @param name {string} The name of the parameter to pass the file along as\n   * @returns {Promise<any>} returns a FileEntry promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  uploadFile(\n    url: string,\n    body: any,\n    headers: any,\n    filePath: string,\n    name: string\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   *\n   * @param url {string} The url to send the request to\n   * @param body {Object} The body of the request\n   * @param headers {Object} The headers to set for this request\n   * @param filePath {string} The path to download the file to, including the file name.\n   * @returns {Promise<any>} returns a FileEntry promise that resolve on success, and reject on failure\n   */\n  @Cordova()\n  downloadFile(\n    url: string,\n    body: any,\n    headers: any,\n    filePath: string\n  ): Promise<any> {\n    return;\n  }\n}\n"]}