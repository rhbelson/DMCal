var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var FCMOriginal = /** @class */ (function (_super) {
    __extends(FCMOriginal, _super);
    function FCMOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FCMOriginal.prototype.getToken = function () { return cordova(this, "getToken", {}, arguments); };
    FCMOriginal.prototype.onTokenRefresh = function () { return cordova(this, "onTokenRefresh", { "observable": true }, arguments); };
    FCMOriginal.prototype.subscribeToTopic = function (topic) { return cordova(this, "subscribeToTopic", {}, arguments); };
    FCMOriginal.prototype.unsubscribeFromTopic = function (topic) { return cordova(this, "unsubscribeFromTopic", {}, arguments); };
    FCMOriginal.prototype.onNotification = function () { return cordova(this, "onNotification", { "observable": true, "successIndex": 0, "errorIndex": 2 }, arguments); };
    FCMOriginal.pluginName = "FCM";
    FCMOriginal.plugin = "cordova-plugin-fcm-with-dependecy-updated";
    FCMOriginal.pluginRef = "FCMPlugin";
    FCMOriginal.repo = "https://github.com/andrehtissot/cordova-plugin-fcm-with-dependecy-updated";
    FCMOriginal.platforms = ["Android", "iOS"];
    return FCMOriginal;
}(IonicNativePlugin));
var FCM = new FCMOriginal();
export { FCM };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ZjbS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUV4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQStEVCx1QkFBaUI7Ozs7SUFPeEMsc0JBQVE7SUFZUiw0QkFBYztJQVlkLDhCQUFnQixhQUFDLEtBQWE7SUFZOUIsa0NBQW9CLGFBQUMsS0FBYTtJQWNsQyw0QkFBYzs7Ozs7O2NBMUhoQjtFQWlFeUIsaUJBQWlCO1NBQTdCLEdBQUciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBOb3RpZmljYXRpb25EYXRhIHtcbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGUgbm90aWZpY2F0aW9uIHdhcyBwcmVzc2VkIG9yIG5vdFxuICAgKi9cblxuICB3YXNUYXBwZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIE5vdGlmaWNhdGlvbiBkYXRhIGhhc2ggaXRlbVxuICAgKi9cblxuICBbbmFtZTogc3RyaW5nXTogYW55O1xufVxuXG4vKipcbiAqIEBuYW1lIEZDTVxuICogQGRlc2NyaXB0aW9uXG4gKiBQcm92aWRlcyBiYXNpYyBmdW5jdGlvbmFsaXR5IGZvciBGaXJlYmFzZSBDbG91ZCBNZXNzYWdpbmdcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEZDTSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZmNtL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBmY206IEZDTSkge31cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLmZjbS5zdWJzY3JpYmVUb1RvcGljKCdtYXJrZXRpbmcnKTtcbiAqXG4gKiB0aGlzLmZjbS5nZXRUb2tlbigpLnRoZW4odG9rZW4gPT4ge1xuICogICBiYWNrZW5kLnJlZ2lzdGVyVG9rZW4odG9rZW4pO1xuICogfSk7XG4gKlxuICogdGhpcy5mY20ub25Ob3RpZmljYXRpb24oKS5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gKiAgIGlmKGRhdGEud2FzVGFwcGVkKXtcbiAqICAgICBjb25zb2xlLmxvZyhcIlJlY2VpdmVkIGluIGJhY2tncm91bmRcIik7XG4gKiAgIH0gZWxzZSB7XG4gKiAgICAgY29uc29sZS5sb2coXCJSZWNlaXZlZCBpbiBmb3JlZ3JvdW5kXCIpO1xuICogICB9O1xuICogfSk7XG4gKlxuICogdGhpcy5mY20ub25Ub2tlblJlZnJlc2goKS5zdWJzY3JpYmUodG9rZW4gPT4ge1xuICogICBiYWNrZW5kLnJlZ2lzdGVyVG9rZW4odG9rZW4pO1xuICogfSk7XG4gKlxuICogdGhpcy5mY20udW5zdWJzY3JpYmVGcm9tVG9waWMoJ21hcmtldGluZycpO1xuICpcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIE5vdGlmaWNhdGlvbkRhdGFcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdGQ00nLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1mY20td2l0aC1kZXBlbmRlY3ktdXBkYXRlZCcsXG4gIHBsdWdpblJlZjogJ0ZDTVBsdWdpbicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYW5kcmVodGlzc290L2NvcmRvdmEtcGx1Z2luLWZjbS13aXRoLWRlcGVuZGVjeS11cGRhdGVkJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbn0pXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBGQ00gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBHZXRzIGRldmljZSdzIGN1cnJlbnQgcmVnaXN0cmF0aW9uIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcmVnaXN0cmF0aW9uIGlkIHRva2VuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldFRva2VuKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGZpcmluZyBvbiB0aGUgdG9rZW4gcmVmcmVzaFxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxzdHJpbmc+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBub3RpZmllcyB3aXRoIHRoZSBjaGFuZ2Ugb2YgZGV2aWNlJ3MgcmVnaXN0cmF0aW9uIGlkXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZVxuICB9KVxuICBvblRva2VuUmVmcmVzaCgpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVzIHlvdSB0byBhIFt0b3BpY10oaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3Mvbm90aWZpY2F0aW9ucy9hbmRyb2lkL2NvbnNvbGUtdG9waWNzKVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9waWMgVG9waWMgdG8gYmUgc3Vic2NyaWJlZCB0b1xuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSByZXNvbHZpbmcgaW4gcmVzdWx0IG9mIHN1YnNjcmliaW5nIHRvIGEgdG9waWNcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3Vic2NyaWJlVG9Ub3BpYyh0b3BpYzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmVzIHlvdSBmcm9tIGEgW3RvcGljXShodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy9ub3RpZmljYXRpb25zL2FuZHJvaWQvY29uc29sZS10b3BpY3MpXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b3BpYyBUb3BpYyB0byBiZSB1bnN1YnNjcmliZWQgZnJvbVxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSByZXNvbHZpbmcgaW4gcmVzdWx0IG9mIHVuc3Vic2NyaWJpbmcgZnJvbSBhIHRvcGljXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVuc3Vic2NyaWJlRnJvbVRvcGljKHRvcGljOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBXYXRjaCBmb3IgaW5jb21pbmcgbm90aWZpY2F0aW9uc1xuICAgKlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGRhdGEgZnJvbSB0aGUgbm90aWZpY2F0aW9uXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgZXJyb3JJbmRleDogMlxuICB9KVxuICBvbk5vdGlmaWNhdGlvbigpOiBPYnNlcnZhYmxlPE5vdGlmaWNhdGlvbkRhdGE+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==